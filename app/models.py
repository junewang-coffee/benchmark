from django.db import models


class StandardAnswer(models.Model):
    """Represents a standard answer for a question.

    Attributes:
    ----------
    source : str
        The source of the standard answer (unique).
    content : str
        The content of the standard answer.
    """
    source = models.CharField(max_length=255, unique=True)
    content = models.TextField()

    def __str__(self) -> str:
        """Return the source as the string representation."""
        return self.source


class TestQuestion(models.Model):
    """Represents a test question.

    Attributes:
    ----------
    question_id : str
        The unique identifier for the question.
    question : str
        The text of the question.
    standard_answer : str
        The standard answer for the question.
    difficulty : int
        The difficulty level of the question (default: 3).
    source : str
        The source of the question.
    tags : str
        Tags associated with the question.
    """
    question_id = models.CharField(max_length=10, unique=True)
    question = models.TextField()
    standard_answer = models.TextField()
    difficulty = models.IntegerField(default=3)
    source = models.CharField(max_length=255)
    tags = models.CharField(max_length=255, blank=True)

    def __str__(self) -> str:
        """Return a formatted string with the question ID and truncated question text."""
        return f"[{self.question_id}] {self.question[:30]}"


class UploadedTestPaper(models.Model):
    """Represents an uploaded test paper.

    Attributes:
    ----------
    name : str
        The name of the test paper.
    uploaded_at : datetime
        The timestamp when the test paper was uploaded.
    csv_file : File
        The CSV file associated with the test paper.
    """
    name = models.CharField(max_length=100)
    uploaded_at = models.DateTimeField(auto_now_add=True)
    csv_file = models.FileField(upload_to="uploads/")

    def __str__(self) -> str:
        """Return the name of the test paper."""
        return self.name


class Evaluation(models.Model):
    """Represents an evaluation of a test question.

    Attributes:
    ----------
    exp_id : str
        The experiment ID.
    test_paper_id : str
        The test paper ID.
    question_id : str
        The question ID.
    test_question : str
        The text of the test question.
    bot_response : str
        The response generated by the bot.
    question_source : str
        The source of the question.
    standard_answer : str
        The standard answer for the question.
    difficulty : int
        The difficulty level of the question.
    accuracy : int
        The accuracy score of the bot's response.
    relevance : int
        The relevance score of the bot's response.
    logic : int
        The logic score of the bot's response.
    conciseness : int
        The conciseness score of the bot's response.
    language_quality : int
        The language quality score of the bot's response.
    total_score : int
        The total score of the bot's response.
    overall_comment : str
        The overall comment for the evaluation.
    created_at : datetime
        The timestamp when the evaluation was created.
    """
    exp_id = models.CharField(max_length=50)
    test_paper_id = models.CharField(max_length=50, blank=True)
    question_id = models.CharField(max_length=10)
    test_question = models.TextField()
    bot_response = models.TextField()
    question_source = models.TextField()
    standard_answer = models.TextField()
    difficulty = models.IntegerField()
    accuracy = models.IntegerField()
    relevance = models.IntegerField()
    logic = models.IntegerField()
    conciseness = models.IntegerField()
    language_quality = models.IntegerField()
    total_score = models.IntegerField()
    overall_comment = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ("exp_id", "question_id")
        verbose_name = "Evaluation"
        verbose_name_plural = "Evaluations"

    def __str__(self) -> str:
        """Return a formatted string with the experiment ID and question ID."""
        return f"{self.exp_id} - {self.question_id}"


class UploadedEvaluationBatch(models.Model):
    """Represents a batch of uploaded evaluations.

    Attributes:
    ----------
    name : str
        The name of the evaluation batch.
    json_file : File
        The JSON file containing evaluation data.
    uploaded_at : datetime
        The timestamp when the evaluation batch was uploaded.
    """
    name = models.CharField(max_length=100)
    json_file = models.FileField(upload_to="uploads/")
    uploaded_at = models.DateTimeField(auto_now_add=True)

    def __str__(self) -> str:
        """Return a formatted string with the name and upload date."""
        uploaded_at_str = self.uploaded_at.strftime("%Y-%m-%d") if self.uploaded_at else "Undefined"
        return f"{self.name} ({uploaded_at_str})"


class ExamPaperQuestion(models.Model):
    """Represents a question in a test paper.

    Attributes:
    ----------
    test_paper : ForeignKey
        The test paper to which the question belongs.
    question_id : str
        The identifier for the question.
    question : str
        The text of the question.
    standard_answer : str
        The standard answer for the question.
    difficulty : int
        The difficulty level of the question (default: 3).
    source : str
        The source of the question.
    tags : str
        Tags associated with the question.
    """
    test_paper = models.ForeignKey(
        UploadedTestPaper, on_delete=models.CASCADE, related_name="questions"
    )
    question_id = models.CharField(max_length=10, blank=True)
    question = models.TextField()
    standard_answer = models.TextField()
    difficulty = models.IntegerField(default=3)
    source = models.CharField(max_length=255, blank=True)
    tags = models.CharField(max_length=255, blank=True)

    def __str__(self) -> str:
        """Return a truncated version of the question text."""
        return f"{self.question[:50]}..."
