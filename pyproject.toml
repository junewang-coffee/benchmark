[project]
name = "benchmark"
version = "0.1.0"
description = "AI Response Evaluation API with Django + Ninja"
readme = "README.md"
requires-python = ">=3.12"

dependencies = [
    "Django>=4.2",
    "django-ninja>=0.21.0",
    "djangorestframework>=3.14.0"
]

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"


[tool.ruff]
exclude = [".venv", ".git", ".vscode", "*/migrations/*"]
line-length = 120
target-version = "py312"

[tool.ruff.lint]
# See Rules: https://docs.astral.sh/ruff/rules/
ignore = ["D100", "D104", "D106", "E501", "TRY003", "ANN201", "COM812", "S101"]
select = [
  "F",    # Pyflakes
  "E",    # pycodestyle - Error
  "W",    # pycodestyle - Warning
  "C901", # McCabe complex-structure
  "I",    # isort
  "N",    # pep8-naming
  "D",    # pydocstyle
  "UP",   # pyupgrade
  "ANN",  # flake8-annotations
  "S",    # flake8-bandit
  "A",    # flake8-builtins
  "COM",  # flake8-commas
  "C4",   # flake8-comprehensions
  "DTZ",  # flake8-datetimez
  "T10",  # flake8-debugger
  "DJ",   # flake8-django
  "LOG",  # flake8-logging
  "G",    # flake8-logging-format
  "INP",  # flake8-no-pep420
  "PIE",  # flake8-pie
  "T20",  # flake8-print
  "PYI",  # flake8-pyi
  "RSE",  # flake8-raise
  "RET",  # flake8-return
  "SLOT", # flake8-slot
  "SIM",  # flake8-simplify
  "TID",  # flake8-tidy-imports
  "TC",   # flake8-type-checking
  "INT",  # flake8-gettext
  "ARG",  # flake8-unused-arguments
  "PTH",  # flake8-use-pathlib
  "TD",   # flake8-todo
  "ERA",  # flake8-eradicate
  "PL",   # pylint
  "TRY",  # tryceratops
  "PERF", # Perflint
  "RUF",  # ruff
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
detect-same-package = true
section-order = [
  "future",
  "standard-library",
  "third-party",
  "first-party",
  "local-folder",
]

[tool.ruff.lint.per-file-ignores]
"test_*.py" = ["ARG001", "PLR2004", "S106"]
"tests/conftest.py" = ["ARG001", "PLR2004", "S106"]
